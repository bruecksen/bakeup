# Generated by Django 3.2.12 on 2023-10-24 15:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import djmoney.models.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('shop', '0001_initial'),
        ('taggit', '0005_auto_20220424_2025'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField()),
                ('image', models.FileField(blank=True, null=True, upload_to='')),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('sku', models.CharField(blank=True, max_length=255, null=True, verbose_name='SKU')),
                ('display_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='display name')),
                ('slug', models.SlugField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('image', models.FileField(blank=True, null=True, upload_to='product_images', verbose_name='Image')),
                ('image_secondary', models.FileField(blank=True, null=True, upload_to='product_images', verbose_name='Secondary Image')),
                ('weight', models.FloatField(default=1000, help_text='weight in grams', verbose_name='Weight')),
                ('is_sellable', models.BooleanField(default=False, verbose_name='Is sellable')),
                ('is_buyable', models.BooleanField(default=False, verbose_name='Is buyable')),
                ('is_composable', models.BooleanField(default=False, verbose_name='Is composable')),
                ('is_recurring', models.BooleanField(default=False, verbose_name='Is abo product?')),
                ('max_recurring_order_qty', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Max abo quantity?')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='workshop.category', verbose_name='Category')),
                ('product_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='workshop.product')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ReminderMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('state', models.IntegerField(choices=[(0, 'Planned'), (1, 'Sent'), (2, 'Planned Sending'), (3, 'Sending')], default=0)),
                ('subject', models.TextField()),
                ('body', models.TextField(help_text='MÃ¶gliche Tags: {{ site_name }}, {{ first_name }}, {{ last_name }}, {{ email }}, {{ order }}, {{ price_total }}, {{ production_day }}, {{ order_count }}, {{ point_of_sale }}')),
                ('send_log', models.JSONField(default=dict)),
                ('error_log', models.JSONField(default=dict)),
                ('sent_date', models.DateTimeField(blank=True, null=True)),
                ('point_of_sale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.pointofsale')),
                ('production_day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.productionday')),
                ('users', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-sent_date'],
            },
        ),
        migrations.CreateModel(
            name='ProductPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('price_currency', djmoney.models.fields.CurrencyField(choices=[('EUR', 'Euro')], default='EUR', editable=False, max_length=3)),
                ('price', djmoney.models.fields.MoneyField(decimal_places=2, default_currency='EUR', max_digits=14, verbose_name='Price')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sale_prices', to='workshop.product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('matched_count', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('production_day', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_mapping', to='shop.productionday')),
                ('source_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_product', to='workshop.product')),
                ('target_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_product', to='workshop.product')),
            ],
            options={
                'ordering': ('production_day',),
            },
        ),
        migrations.CreateModel(
            name='ProductionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('state', models.IntegerField(choices=[(0, 'Planned'), (1, 'In Production'), (2, 'Produced'), (3, 'Canceled')], default=0)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('quantity', models.FloatField()),
                ('duration', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('parent_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='workshop.productionplan')),
                ('product', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='production_plans', to='workshop.product')),
                ('production_day', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='production_plans', to='shop.productionday')),
            ],
            options={
                'ordering': ('-production_day', 'product__name'),
            },
        ),
        migrations.CreateModel(
            name='ProductHierarchy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('quantity', models.FloatField()),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='childs', to='workshop.product')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parents', to='workshop.product')),
            ],
            options={
                'ordering': ('pk',),
            },
        ),
        migrations.CreateModel(
            name='Instruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('instruction', models.TextField(blank=True, null=True, verbose_name='Instruction')),
                ('duration', models.PositiveSmallIntegerField(blank=True, help_text='duration in seconds', null=True)),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='instructions', to='workshop.product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='productionplan',
            constraint=models.CheckConstraint(check=models.Q(('pk', django.db.models.expressions.F('parent_plan')), _negated=True), name='production_plan_not_equal_parent'),
        ),
        migrations.AddConstraint(
            model_name='producthierarchy',
            constraint=models.CheckConstraint(check=models.Q(('parent', django.db.models.expressions.F('child')), _negated=True), name='recipe_parent_and_child_cannot_be_equal'),
        ),
        migrations.AlterUniqueTogether(
            name='producthierarchy',
            unique_together={('parent', 'child')},
        ),
    ]
