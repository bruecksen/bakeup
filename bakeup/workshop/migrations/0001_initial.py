# Generated by Django 3.2.12 on 2022-04-26 12:51

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField()),
                ('image', models.FileField(blank=True, null=True, upload_to='')),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.FileField(blank=True, null=True, upload_to='')),
                ('weight', models.PositiveSmallIntegerField(blank=True, help_text='weight in grams', null=True)),
                ('weight_units', models.CharField(blank=True, choices=[('g', 'Grams'), ('kg', 'Kilograms')], max_length=255, null=True)),
                ('volume', models.PositiveSmallIntegerField(blank=True, help_text='weight in grams', null=True)),
                ('volume_units', models.CharField(blank=True, choices=[('ml', 'Milliliter'), ('l', 'Liter')], max_length=255, null=True)),
                ('is_sellable', models.BooleanField(default=False)),
                ('is_buyable', models.BooleanField(default=False)),
                ('is_composable', models.BooleanField(default=False)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='workshop.category')),
            ],
            options={
                'ordering': ('pk',),
            },
        ),
        migrations.CreateModel(
            name='ProductionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('quantity', models.FloatField()),
                ('duration', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('parent_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='workshop.productionplan')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='production_plans', to='workshop.product')),
            ],
            options={
                'ordering': ('pk',),
            },
        ),
        migrations.CreateModel(
            name='ProductHierarchy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('quantity', models.FloatField()),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='childs', to='workshop.product')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parents', to='workshop.product')),
            ],
            options={
                'ordering': ('pk',),
            },
        ),
        migrations.CreateModel(
            name='Instruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('instruction', models.TextField()),
                ('duration', models.PositiveSmallIntegerField(help_text='duration in seconds')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='instructions', to='workshop.product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='productionplan',
            constraint=models.CheckConstraint(check=models.Q(('pk', django.db.models.expressions.F('parent_plan')), _negated=True), name='production_plan_not_equal_parent'),
        ),
        migrations.AddConstraint(
            model_name='producthierarchy',
            constraint=models.CheckConstraint(check=models.Q(('parent', django.db.models.expressions.F('child')), _negated=True), name='recipe_parent_and_child_cannot_be_equal'),
        ),
        migrations.AlterUniqueTogether(
            name='producthierarchy',
            unique_together={('parent', 'child')},
        ),
    ]
